export const MOCK_REPORT = {
  report:
    "## Feature/Product Report\n\nThis report details the structure and functionality of the UI feature/product based on the provided files: `ui/src/main.tsx`, `ui/src/setup.tsx`, and `ui/src/routeTree.gen.ts`.\n\n### 1. `ui/src/main.tsx` - Application Entry Point\n\n**Purpose:** This file serves as the primary entry point for the React application. It is responsible for initializing the routing system and rendering the root component of the application.\n\n**Key Functionalities:**\n\n*   **Essential Module Imports:** Imports core React modules (`StrictMode`, `ReactDOM`), TanStack Router components (`RouterProvider`, `createRouter`), and the application wrapper function (`createAppWrapper`) from `src/setup.tsx`.\n*   **Import Generated Route Tree:** Imports the `routeTree` object from `src/routeTree.gen.ts`, which defines the application's routing structure.\n*   **Create TanStack Router Instance:** Initializes a new TanStack Router instance using the imported `routeTree`.\n*   **Register Router for Type Safety:** Augments the `@tanstack/react-router` module to register the created router instance, enabling type safety for routing operations throughout the application.\n*   **Render React Application:** Locates the root HTML element (`#root`) and renders the main React application. It wraps the `RouterProvider` (which manages the application's routes) with the `createAppWrapper` function, ensuring that global providers (like theming and query client) are applied.\n\n**Dependencies:**\n*   `ui/src/setup.tsx`: Provides the `createAppWrapper` function, which wraps the main application with necessary providers.\n*   `ui/src/routeTree.gen.ts`: Provides the `routeTree` object, which defines the application's routing configuration.\n\n### 2. `ui/src/setup.tsx` - Application Setup and Providers\n\n**Purpose:** This file centralizes the setup of application-wide providers, such as the TanStack Query client for data fetching and Mantine for UI theming. It provides wrapper components to ensure these contexts are available to the application.\n\n**Key Functionalities:**\n\n*   **Import Dependencies:** Imports React, Mantine components (`MantineProvider`), and TanStack Query components (`QueryClient`, `QueryClientProvider`). It also imports `main.css` for global styles.\n*   **Initialize TanStack Query Client:** Creates and configures a `QueryClient` instance with default options for `staleTime` (5 minutes) and `gcTime` (10 minutes), optimizing data caching behavior.\n*   **Test Wrapper Component (`TestWrapper`):** Exports a component specifically designed for wrapping components during testing. It provides the `QueryClientProvider` and `MantineProvider` contexts.\n*   **Application Wrapper Component (`createAppWrapper`):** Exports a function that takes React children and wraps them with the `QueryClientProvider` and `MantineProvider`. This ensures that all parts of the main application rendered via `main.tsx` have access to data fetching and theming contexts.\n\n**Dependencies:**\n*   `./main.css`: For global styling.\n*   `ui/src/main.tsx`: Consumes the `createAppWrapper` function to wrap the entire application.\n\n### 3. `ui/src/routeTree.gen.ts` - Generated Route Configuration\n\n**Purpose:** This file is automatically generated by TanStack Router and defines the complete routing structure of the application. It consolidates all individual route definitions into a single, type-safe route tree.\n\n**Key Functionalities:**\n\n*   **ESLint and TypeScript Directives:** Contains directives to manage linting and TypeScript behavior for the generated file.\n*   **TanStack Router Generated File Disclaimer:** A standard disclaimer indicating that the file is auto-generated and should not be manually edited.\n*   **Route Imports:** Imports individual route definitions (e.g., Root Route, Index Route, Generate Tests Route). While the specific files for these routes are not provided, their imports are crucial for building the tree.\n*   **Route Definitions:** Defines the structure and properties of each route within the application.\n*   **Interface Augmentations:** Augments various TanStack Router interfaces (`FileRoutesByFullPath`, `FileRoutesByToPath`, `FileRoutesByID`, `AggregateFileRouteTypes`, `RootRouteChildren`, `TanStackReactRouterModule`, `FileRoutesByPath`) to provide strong type safety for the defined routes.\n*   **Root Route Children Object:** Organizes the child routes under the root route.\n*   **Exported Route Tree:** Exports the `routeTree` object, which is then consumed by `ui/src/main.tsx` to initialize the router.\n\n**Dependencies:**\n*   Individual route files (e.g., `__root.tsx`, `index.tsx`, `generate-tests.tsx` - implied by the annotations, though not provided in the directory list).\n*   `ui/src/main.tsx`: Imports and uses the `routeTree` to configure the application's router.\n\n### Conclusion\n\nThe UI feature/product is structured around a modern React ecosystem, leveraging **TanStack Router** for robust, type-safe routing and **TanStack Query** for efficient data fetching and caching. **Mantine** provides a consistent and customizable UI framework.\n\n*   `ui/src/main.tsx` acts as the orchestrator, bringing together the routing logic and the application's global providers.\n*   `ui/src/setup.tsx` centralizes the configuration of essential services like data management and UI theming, making them easily accessible throughout the application.\n*   `ui/src/routeTree.gen.ts` is a critical, auto-generated component that ensures the routing structure is well-defined and type-safe, simplifying navigation and development.\n\nThis modular approach promotes maintainability, scalability, and a clear separation of concerns within the application's UI layer.",
  files: [
    {
      name: "main.tsx",
      text: 'import { StrictMode } from "react";\nimport ReactDOM from "react-dom/client";\nimport { RouterProvider, createRouter } from "@tanstack/react-router";\nimport { createAppWrapper } from "src/setup.tsx";\n\n// Import the generated route tree\nimport { routeTree } from "src/routeTree.gen";\n\n// Create a new router instance\nconst router = createRouter({ routeTree });\n\n// Register the router instance for type safety\ndeclare module "@tanstack/react-router" {\n  interface Register {\n    router: typeof router;\n  }\n}\n\n// Render the app\nconst rootElement = document.getElementById("root")!;\nif (!rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement);\n  root.render(\n    <StrictMode>\n      {createAppWrapper(<RouterProvider router={router} />)}\n    </StrictMode>\n  );\n}\n',
      path: "ui/src/main.tsx",
      dependents: [],
      annotations: [
        "## 1. Essential Module Imports",
        "## 2. Import Generated Route Tree",
        "## 3. Create TanStack Router Instance",
        "## 4. Register Router for Type Safety",
        "## 5. Render React Application",
      ],
      annotatedText:
        '```\nimport { StrictMode } from "react";\nimport ReactDOM from "react-dom/client";\nimport { RouterProvider, createRouter } from "@tanstack/react-router";\nimport { createAppWrapper } from "src/setup.tsx";\n\n## 1. Essential Module Imports\n\n// Import the generated route tree\nimport { routeTree } from "src/routeTree.gen";\n\n## 2. Import Generated Route Tree\n\n// Create a new router instance\nconst router = createRouter({ routeTree });\n\n## 3. Create TanStack Router Instance\n\n// Register the router instance for type safety\ndeclare module "@tanstack/react-router" {\n  interface Register {\n    router: typeof router;\n  }\n}\n\n## 4. Register Router for Type Safety\n\n## 5. Render React Application\n\n// Render the app\nconst rootElement = document.getElementById("root")!;\nif (!rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement);\n  root.render(\n    <StrictMode>\n      {createAppWrapper(<RouterProvider router={router} />)}\n    </StrictMode>\n  );\n}\n```',
    },
    {
      name: "setup.tsx",
      text: 'import React from "react";\nimport { MantineProvider } from "@mantine/core";\nimport { QueryClient, QueryClientProvider } from "@tanstack/react-query";\nimport "./main.css";\n\n// Create a global query client instance\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      gcTime: 1000 * 60 * 10, // 10 minutes\n    },\n  },\n});\n\n// Create a reusable wrapper that provides the same context as production\nexport const TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <QueryClientProvider client={queryClient}>\n    <MantineProvider defaultColorScheme="light">{children}</MantineProvider>\n  </QueryClientProvider>\n);\n\n// For use in main.js/main.tsx\n// eslint-disable-next-line react-refresh/only-export-components\nexport const createAppWrapper = (children: React.ReactNode) => (\n  <QueryClientProvider client={queryClient}>\n    <MantineProvider defaultColorScheme="light">{children}</MantineProvider>\n  </QueryClientProvider>\n);\n',
      path: "ui/src/setup.tsx",
      dependents: [
        {
          name: "main.tsx",
          path: "ui/src/main.tsx",
          analysis:
            "`setup.tsx` imports the core application component or the TanStack Router instance from `main.tsx`. It uses these imports within its `Test Wrapper Component` and `Application Wrapper Component` to provide a consistent testing environment. This dependency ensures that application components are tested within the same context (e.g., routing, query client) they would operate in during actual application execution.",
        },
      ],
      annotations: [
        "## 1. Import Dependencies",
        "## 2. Initialize TanStack Query Client",
        "## 3. Test Wrapper Component",
        "## 4. Application Wrapper Component",
      ],
      annotatedText:
        '```\n## 1. Import Dependencies\nimport React from "react";\nimport { MantineProvider } from "@mantine/core";\nimport { QueryClient, QueryClientProvider } from "@tanstack/react-query";\nimport "./main.css";\n\n## 2. Initialize TanStack Query Client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      gcTime: 1000 * 60 * 10, // 10 minutes\n    },\n  },\n});\n\n## 3. Test Wrapper Component\nexport const TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <QueryClientProvider client={queryClient}>\n    <MantineProvider defaultColorScheme="light">{children}</MantineProvider>\n  </QueryClientProvider>\n);\n\n## 4. Application Wrapper Component\nexport const createAppWrapper = (children: React.ReactNode) => (\n  <QueryClientProvider client={queryClient}>\n    <MantineProvider defaultColorScheme="light">{children}</MantineProvider>\n  </QueryClientProvider>\n);\n```',
    },
    {
      name: "routeTree.gen.ts",
      text: "/* eslint-disable */\n\n// @ts-nocheck\n\n// noinspection JSUnusedGlobalSymbols\n\n// This file was automatically generated by TanStack Router.\n// You should NOT make any changes in this file as it will be overwritten.\n// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.\n\nimport { Route as rootRouteImport } from './routes/__root'\nimport { Route as IndexRouteImport } from './routes/index'\nimport { Route as generateTestsGenerateTestsRouteImport } from './routes/(generate-tests)/generate-tests'\n\nconst IndexRoute = IndexRouteImport.update({\n  id: '/',\n  path: '/',\n  getParentRoute: () => rootRouteImport,\n} as any)\nconst generateTestsGenerateTestsRoute =\n  generateTestsGenerateTestsRouteImport.update({\n    id: '/(generate-tests)/generate-tests',\n    path: '/generate-tests',\n    getParentRoute: () => rootRouteImport,\n  } as any)\n\nexport interface FileRoutesByFullPath {\n  '/': typeof IndexRoute\n  '/generate-tests': typeof generateTestsGenerateTestsRoute\n}\nexport interface FileRoutesByTo {\n  '/': typeof IndexRoute\n  '/generate-tests': typeof generateTestsGenerateTestsRoute\n}\nexport interface FileRoutesById {\n  __root__: typeof rootRouteImport\n  '/': typeof IndexRoute\n  '/(generate-tests)/generate-tests': typeof generateTestsGenerateTestsRoute\n}\nexport interface FileRouteTypes {\n  fileRoutesByFullPath: FileRoutesByFullPath\n  fullPaths: '/' | '/generate-tests'\n  fileRoutesByTo: FileRoutesByTo\n  to: '/' | '/generate-tests'\n  id: '__root__' | '/' | '/(generate-tests)/generate-tests'\n  fileRoutesById: FileRoutesById\n}\nexport interface RootRouteChildren {\n  IndexRoute: typeof IndexRoute\n  generateTestsGenerateTestsRoute: typeof generateTestsGenerateTestsRoute\n}\n\ndeclare module '@tanstack/react-router' {\n  interface FileRoutesByPath {\n    '/': {\n      id: '/'\n      path: '/'\n      fullPath: '/'\n      preLoaderRoute: typeof IndexRouteImport\n      parentRoute: typeof rootRouteImport\n    }\n    '/(generate-tests)/generate-tests': {\n      id: '/(generate-tests)/generate-tests'\n      path: '/generate-tests'\n      fullPath: '/generate-tests'\n      preLoaderRoute: typeof generateTestsGenerateTestsRouteImport\n      parentRoute: typeof rootRouteImport\n    }\n  }\n}\n\nconst rootRouteChildren: RootRouteChildren = {\n  IndexRoute: IndexRoute,\n  generateTestsGenerateTestsRoute: generateTestsGenerateTestsRoute,\n}\nexport const routeTree = rootRouteImport\n  ._addFileChildren(rootRouteChildren)\n  ._addFileTypes<FileRouteTypes>()\n",
      path: "ui/src/routeTree.gen.ts",
      dependents: [
        {
          name: "main.tsx",
          path: "ui/src/main.tsx",
          analysis:
            "File A (`routeTree.gen.ts`) does not import anything from File B (`main.tsx`). Instead, File B imports the `routeTree` object generated by File A, which encapsulates the application's entire route structure. This allows `main.tsx` to initialize the TanStack Router with the complete, type-safe route configuration, establishing File A as the central source of truth for the application's routing logic.",
        },
      ],
      annotations: [
        "## 1. ESLint and TypeScript Directives",
        "## 2. TanStack Router Generated File Disclaimer",
        "## 3. Root Route Import",
        "## 4. Index Route Import",
        "## 5. Generate Tests Route Import",
        "## 6. Index Route Definition",
        "## 7. Generate Tests Route Definition",
        "## 8. File Routes by Full Path Interface",
        "## 9. File Routes by To Path Interface",
        "## 10. File Routes by ID Interface",
        "## 11. Aggregate File Route Types Interface",
        "## 12. Root Route Children Interface",
        "## 13. TanStack React Router Module Augmentation",
        "## 14. File Routes by Path Interface Augmentation for Index Route",
        "## 15. File Routes by Path Interface Augmentation for Generate Tests Route",
        "## 16. Root Route Children Object",
        "## 17. Exported Route Tree",
      ],
      annotatedText:
        "```\n## 1. ESLint and TypeScript Directives\n\n## 2. TanStack Router Generated File Disclaimer\n\n## 3. Root Route Import\n\n## 4. Index Route Import\n\n## 5. Generate Tests Route Import\n\n## 6. Index Route Definition\n\n## 7. Generate Tests Route Definition\n\n## 8. File Routes by Full Path Interface\n\n## 9. File Routes by To Path Interface\n\n## 10. File Routes by ID Interface\n\n## 11. Aggregate File Route Types Interface\n\n## 12. Root Route Children Interface\n\n## 13. TanStack React Router Module Augmentation\n\n## 14. File Routes by Path Interface Augmentation for Index Route\n\n## 15. File Routes by Path Interface Augmentation for Generate Tests Route\n\n## 16. Root Route Children Object\n\n## 17. Exported Route Tree\n```",
    },
  ],
};
