export const FILES_TO_TEXT = [
  {
    fileName: "index.tsx",
    text: 'import { createFileRoute } from "@tanstack/react-router";\nimport { useEffect, useMemo, useState } from "react";\nimport {\n  Container,\n  Paper,\n  Stack,\n  Center,\n  Title,\n  Text,\n  Box,\n  Button,\n  Group,\n  Stepper,\n  Tooltip,\n} from "@mantine/core";\nimport {\n  IconChevronLeft,\n  IconChevronRight,\n  IconCheck,\n} from "@tabler/icons-react";\nimport { FileDropzone } from "../../components/dropzone/dropzone";\nimport { useDropzone } from "../../components/dropzone/use-dropzone";\n\nexport const Route = createFileRoute("/generate-tests/")({\n  component: Index,\n});\n\nfunction Index() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const {\n    files,\n    rejectedFiles,\n    handleDrop,\n    handleReject,\n    handleDelete,\n    handleDeleteRejected,\n  } = useDropzone();\n\n  const [fileBytes, setFileBytes] = useState<Record<string, Uint8Array>>({});\n\n  useEffect(() => {\n    async function getFileBytes() {\n      if (files.length > 0) {\n        const fileBytes = await Promise.all(\n          files.map(async (file) => {\n            return file.arrayBuffer().then((buffer) => new Uint8Array(buffer));\n          })\n        );\n        setFileBytes(\n          fileBytes.reduce(\n            (acc, fileByte, index) => {\n              acc[files[index].name] = fileByte;\n              return acc;\n            },\n            {} as Record<string, Uint8Array>\n          )\n        );\n      }\n    }\n    getFileBytes();\n  }, [files]);\n\n  const fileBytesToText = useMemo(() => {\n    return Object.entries(fileBytes).map(([fileName, fileByte]) => {\n      return {\n        fileName,\n        text: new TextDecoder().decode(fileByte),\n      };\n    });\n  }, [fileBytes]);\n\n  console.log({ fileBytesToText });\n\n  const stepTitles = ["Upload Files", "Generate Tests", "Review Results"];\n  const totalSteps = stepTitles.length;\n\n  const canProceedToNext =\n    currentStep === 0 ? files.length > 0 && rejectedFiles.length === 0 : true;\n\n  const getNextButtonTooltip = () => {\n    if (currentStep === 0) {\n      if (files.length === 0) {\n        return "Please upload files to continue";\n      }\n      if (rejectedFiles.length > 0) {\n        return "Please remove rejected files to continue";\n      }\n    }\n    if (currentStep === totalSteps - 1) {\n      return "Complete the process";\n    }\n    return "";\n  };\n\n  const handleNext = () => {\n    if (currentStep < totalSteps - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <Stack gap="lg">\n            <Box ta="center">\n              <Title order={1} size="h2" mb="md">\n                Welcome to Handoff\n              </Title>\n              <Text c="dimmed" size="lg">\n                Upload your code files to generate natural language test cases\n              </Text>\n            </Box>\n\n            <FileDropzone\n              files={files}\n              rejectedFiles={rejectedFiles}\n              onDrop={handleDrop}\n              onReject={handleReject}\n              onDelete={handleDelete}\n              onDeleteRejected={handleDeleteRejected}\n            />\n          </Stack>\n        );\n      case 1:\n        return (\n          <Stack gap="lg">\n            <Box ta="center">\n              <Title order={2} mb="md">\n                Generate Tests\n              </Title>\n              <Text c="dimmed" size="lg">\n                Processing your files to generate test cases...\n              </Text>\n            </Box>\n            {/* This will be implemented later */}\n            <Text ta="center" c="blue">\n              Coming soon: Test generation in progress\n            </Text>\n          </Stack>\n        );\n      case 2:\n        return (\n          <Stack gap="lg">\n            <Box ta="center">\n              <Title order={2} mb="md">\n                Review Results\n              </Title>\n              <Text c="dimmed" size="lg">\n                Review and download your generated test cases\n              </Text>\n            </Box>\n            {/* This will be implemented later */}\n            <Text ta="center" c="green">\n              Coming soon: Generated test results\n            </Text>\n          </Stack>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Container size="md" style={{ height: "100vh" }}>\n      <Center style={{ height: "100%" }}>\n        <Paper\n          shadow="lg"\n          radius="md"\n          p="xl"\n          style={{ width: "100%", maxWidth: 700 }}\n        >\n          <Stack gap="xl">\n            {/* Step Progress Indicator */}\n            <Box>\n              <Stepper active={currentStep} size="sm">\n                {stepTitles.map((title, index) => (\n                  <Stepper.Step key={index} label={title} />\n                ))}\n              </Stepper>\n            </Box>\n\n            {/* Step Content */}\n            <Box>{renderStepContent()}</Box>\n\n            {/* Navigation */}\n            <Group justify="space-between">\n              <Button\n                variant="outline"\n                onClick={handlePrevious}\n                disabled={currentStep === 0}\n                data-qa="previous-button"\n                leftSection={<IconChevronLeft size={16} />}\n              >\n                Previous\n              </Button>\n\n              <Tooltip\n                label={getNextButtonTooltip()}\n                disabled={canProceedToNext && currentStep !== totalSteps - 1}\n                position="top"\n                data-qa="next-button-tooltip"\n              >\n                <Button\n                  onClick={handleNext}\n                  data-qa="next-button"\n                  disabled={!canProceedToNext || currentStep === totalSteps - 1}\n                  rightSection={\n                    currentStep === totalSteps - 1 ? (\n                      <IconCheck size={16} />\n                    ) : (\n                      <IconChevronRight size={16} />\n                    )\n                  }\n                >\n                  {currentStep === totalSteps - 1 ? "Finish" : "Next"}\n                </Button>\n              </Tooltip>\n            </Group>\n          </Stack>\n        </Paper>\n      </Center>\n    </Container>\n  );\n}\n',
  },
  {
    fileName: "dropzone.tsx",
    text: 'import {\n  Dropzone,\n  type FileWithPath,\n  type FileRejection,\n} from "@mantine/dropzone";\nimport { Box, Text, Group, rem, ActionIcon, Tooltip } from "@mantine/core";\nimport {\n  IconUpload,\n  IconFile,\n  IconX,\n  IconBrandJavascript,\n  IconBrandTypescript,\n  IconBrandReact,\n  IconAlertCircle,\n} from "@tabler/icons-react";\nimport classes from "./dropzone.module.css";\n\ninterface FileDropzoneProps {\n  files: FileWithPath[];\n  rejectedFiles?: FileRejection[];\n  onDrop: (files: FileWithPath[]) => void;\n  onReject: (files: FileRejection[]) => void;\n  onDelete?: (index: number) => void;\n  onDeleteRejected?: (index: number) => void;\n}\n\nconst ALLOWED_EXTENSIONS = [".js", ".jsx", ".ts", ".tsx"];\n\nfunction validateFileType(file: FileWithPath): boolean {\n  const extension = "." + file.name.toLowerCase().split(".").pop();\n  return ALLOWED_EXTENSIONS.includes(extension);\n}\n\nfunction validateFiles(files: FileWithPath[]): {\n  acceptedFiles: FileWithPath[];\n  rejectedFiles: FileRejection[];\n} {\n  const acceptedFiles: FileWithPath[] = [];\n  const rejectedFiles: FileRejection[] = [];\n\n  files.forEach((file) => {\n    if (validateFileType(file)) {\n      acceptedFiles.push(file);\n    } else {\n      rejectedFiles.push({\n        file,\n        errors: [\n          {\n            code: "file-invalid-type",\n            message: `File type not allowed. Only .js, .jsx, .ts, .tsx files are accepted.`,\n          },\n        ],\n      });\n    }\n  });\n\n  return { acceptedFiles, rejectedFiles };\n}\n\nfunction getFileIcon(fileName: string) {\n  const extension = fileName.toLowerCase().split(".").pop();\n\n  switch (extension) {\n    case "ts":\n      return <IconBrandTypescript size={24} style={{ color: "#3178c6" }} />;\n    case "tsx":\n      return <IconBrandReact size={24} style={{ color: "#61dafb" }} />;\n    case "js":\n      return <IconBrandJavascript size={24} style={{ color: "#f7df1e" }} />;\n    case "jsx":\n      return <IconBrandReact size={24} style={{ color: "#61dafb" }} />;\n    default:\n      return <IconFile size={24} />;\n  }\n}\n\nexport function FileDropzone({\n  files,\n  rejectedFiles = [],\n  onDrop,\n  onReject,\n  onDelete,\n  onDeleteRejected,\n}: FileDropzoneProps) {\n  const handleDrop = (droppedFiles: FileWithPath[]) => {\n    const { acceptedFiles, rejectedFiles } = validateFiles(droppedFiles);\n\n    if (acceptedFiles.length > 0) {\n      onDrop(acceptedFiles);\n    }\n\n    if (rejectedFiles.length > 0) {\n      onReject(rejectedFiles);\n    }\n  };\n\n  const handleReject = (rejectedFiles: FileRejection[]) => {\n    onReject(rejectedFiles);\n  };\n\n  return (\n    <>\n      <Dropzone\n        onDrop={handleDrop}\n        onReject={handleReject}\n        maxSize={5 * 1024 ** 2}\n        accept={{\n          "application/javascript": [".js", ".jsx"],\n          "application/typescript": [".ts", ".tsx"],\n          "text/*": [".js", ".jsx", ".ts", ".tsx"],\n        }}\n        multiple\n        data-qa="dropzone-container"\n        className={classes.root}\n      >\n        <Group\n          justify="center"\n          gap="xl"\n          style={{ minHeight: rem(220), pointerEvents: "none" }}\n          data-qa="dropzone-content"\n        >\n          <Dropzone.Accept>\n            <IconUpload\n              data-qa="dropzone-accept-icon"\n              style={{\n                width: rem(52),\n                height: rem(52),\n                color: "var(--mantine-color-blue-6)",\n              }}\n              stroke={1.5}\n            />\n          </Dropzone.Accept>\n          <Dropzone.Reject>\n            <IconX\n              data-qa="dropzone-reject-icon"\n              style={{\n                width: rem(52),\n                height: rem(52),\n                color: "var(--mantine-color-red-6)",\n              }}\n              stroke={1.5}\n            />\n          </Dropzone.Reject>\n          <Dropzone.Idle>\n            <IconFile\n              data-qa="dropzone-idle-icon"\n              style={{\n                width: rem(52),\n                height: rem(52),\n                color: "var(--mantine-color-dimmed)",\n              }}\n              stroke={1.5}\n            />\n          </Dropzone.Idle>\n\n          <div data-qa="dropzone-text-content">\n            <Text size="xl" inline data-qa="dropzone-title">\n              Drag files here or click to select\n            </Text>\n            <Text\n              size="sm"\n              c="dimmed"\n              inline\n              mt={7}\n              data-qa="dropzone-file-types"\n            >\n              Upload TypeScript (.ts, .tsx) or JavaScript (.js, .jsx) files\n            </Text>\n            <Text\n              size="sm"\n              c="dimmed"\n              inline\n              mt={7}\n              data-qa="dropzone-size-limit"\n            >\n              Files should not exceed 5MB\n            </Text>\n          </div>\n        </Group>\n      </Dropzone>\n\n      {(files.length > 0 || rejectedFiles.length > 0) && (\n        <Box data-qa="selected-files-section" className="flex flex-col gap-xs">\n          {files.map((file, index) => (\n            <Group\n              key={`accepted-${index}`}\n              justify="space-between"\n              align="center"\n              data-qa={`selected-file-${index}`}\n            >\n              <Group gap="xs" align="center">\n                {getFileIcon(file.name)}\n                <Text size="sm" c="dimmed">\n                  {file.name} ({(file.size / 1024).toFixed(1)} KB)\n                </Text>\n              </Group>\n              {onDelete && (\n                <ActionIcon\n                  size="sm"\n                  variant="subtle"\n                  color="red"\n                  onClick={() => onDelete(index)}\n                  data-qa={`delete-file-${index}`}\n                  aria-label={`Delete ${file.name}`}\n                >\n                  <IconX size={16} />\n                </ActionIcon>\n              )}\n            </Group>\n          ))}\n\n          {/* Rejected files */}\n          {rejectedFiles.map((rejection, index) => (\n            <Group\n              key={`rejected-${index}`}\n              justify="space-between"\n              align="center"\n              data-qa={`rejected-file-${index}`}\n            >\n              <Group gap="xs" align="center">\n                <Tooltip\n                  label={rejection.errors\n                    .map((error) => error.message)\n                    .join(", ")}\n                  withArrow\n                  position="top"\n                  data-qa={`error-tooltip-${index}`}\n                >\n                  <IconAlertCircle\n                    size={24}\n                    style={{ color: "var(--mantine-color-red-6)" }}\n                  />\n                </Tooltip>\n                <Text size="sm" c="red.6">\n                  {rejection.file.name} (\n                  {(rejection.file.size / 1024).toFixed(1)} KB)\n                </Text>\n              </Group>\n              {onDeleteRejected && (\n                <ActionIcon\n                  size="sm"\n                  variant="subtle"\n                  color="red"\n                  onClick={() => onDeleteRejected(index)}\n                  data-qa={`delete-rejected-file-${index}`}\n                  aria-label={`Delete ${rejection.file.name}`}\n                >\n                  <IconX size={16} />\n                </ActionIcon>\n              )}\n            </Group>\n          ))}\n        </Box>\n      )}\n    </>\n  );\n}\n',
  },
  {
    fileName: "use-dropzone.tsx",
    text: 'import { useState } from "react";\nimport { type FileWithPath, type FileRejection } from "@mantine/dropzone";\n\nexport function useDropzone() {\n  const [files, setFiles] = useState<FileWithPath[]>([]);\n  const [rejectedFiles, setRejectedFiles] = useState<FileRejection[]>([]);\n\n  const handleDrop = (droppedFiles: FileWithPath[]) => {\n    setFiles((prevFiles) => [...prevFiles, ...droppedFiles]);\n    console.log("Files dropped:", droppedFiles);\n  };\n\n  const handleReject = (rejectedFiles: FileRejection[]) => {\n    setRejectedFiles((prevRejected) => [...prevRejected, ...rejectedFiles]);\n    console.log("Files rejected:", rejectedFiles);\n  };\n\n  const handleDelete = (index: number) => {\n    setFiles((currentFiles) => {\n      const newFiles = [...currentFiles];\n      newFiles.splice(index, 1);\n      return newFiles;\n    });\n    console.log("File deleted at index:", index);\n  };\n\n  const handleUpdate = (files: FileWithPath[]) => {\n    setFiles(files);\n    console.log("Files updated:", files);\n  };\n\n  const handleDeleteRejected = (index: number) => {\n    setRejectedFiles((currentRejected) => {\n      const newRejected = [...currentRejected];\n      newRejected.splice(index, 1);\n      return newRejected;\n    });\n    console.log("Rejected file deleted at index:", index);\n  };\n\n  return {\n    files,\n    rejectedFiles,\n    handleDrop,\n    handleReject,\n    handleDelete,\n    handleDeleteRejected,\n    handleUpdate,\n  };\n}\n',
  },
];

export const FILES_TO_TEXT_AS_FILES = FILES_TO_TEXT.map(
  (file) => new File([file.text], file.fileName, { type: "text/plain" })
);
